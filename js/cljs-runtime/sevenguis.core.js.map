{"version":3,"sources":["sevenguis/core.cljs"],"mappings":"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","names":["sevenguis.core/click-count1","reagent.core.atom","cljs.core/deref","sevenguis.core/counter","sevenguis.components/ui-button","cljs.core.swap_BANG_","cljs.core/inc","sevenguis.core/cels","sevenguis.core/cels-valid","sevenguis.core/fahr","sevenguis.core/fahr-valid","sevenguis.core/cels->fahr","temp-str","temp","sevenguis.utils/parse-int","Math/round","sevenguis.core/fahr->cels","sevenguis.core/temperature?","val","cljs.core/boolean","cljs.core/re-find","sevenguis.core/temp-converter","sevenguis.components/input-change","e","input-value","valid-value","clojure.string/blank?","cljs.core/reset!","sevenguis.core/booking-type","sevenguis.core/start-date","sevenguis.utils.format_date","sevenguis.utils/date-now","sevenguis.core/end-date","sevenguis.core/str-to-date","date-str","coll","clojure.string.split","js/Date","sevenguis.core/valid-date?","sevenguis.core/end-after-start?","start-date","end-date","sevenguis.core/one-way?","booking-type","cljs.core._EQ_","p1__39008#","sevenguis.core/flight-combo","sevenguis.core/flight-booker","p1__39009#","p1__39010#","start-valid","end-valid","btn-enabled","msg","js/alert","sevenguis.core/timer-duration","sevenguis.core/timer-value","sevenguis.core/round","number","precision","scale","Math/pow","sevenguis.core/display-timer","p1__39011#","time-str","meter-value","sevenguis.components/input-range","sevenguis.core/update-timer","prev-value","sevenguis.core/timer","js/setInterval","sevenguis.core/crud-filter","sevenguis.core/crud-name","sevenguis.core/crud-surname","sevenguis.core/crud-items","sevenguis.core/crud-selected-item","sevenguis.core/filter-items","items","filter-str","filter-lower","clojure.string/lower-case","cljs.core.into","p1__39012#","cljs.core.filter","clojure.string/includes?","cljs.core.get","p1__39013#","sevenguis.core/crud","sevenguis.components/ui-input","sevenguis.components/ui-list-box","cljs.core/seq","cljs.core/conj","cljs.core/assoc","item-idx","cljs.core/count","sevenguis.utils/vec-remove","sevenguis.core/circles-state","sevenguis.core/selected-circle","sevenguis.core/current-diameter-frame","sevenguis.core/reset-diameter-frame","sevenguis.core/current-state","cljs.core.get_in","sevenguis.core/delete-future","cljs.core.not_EQ_","cljs.core/update-in","past-history","cljs.core.subvec","sevenguis.core/add-state","create-state","cljs.core.conj","G__39014","cljs.core/peek","sevenguis.core/undo","cljs.core/dec","sevenguis.core/redo","sevenguis.core/add-circle","new-circle","prev-state","sevenguis.core/show-circle-menu","circle","pos","sevenguis.utils/prevent-default","sevenguis.core/clone-current-history","idx","cljs.core.assoc","sevenguis.core/update-current-range","d","cljs.core/assoc-in","sevenguis.core/circle-menu-2","with-let39016","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__35414__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init39017","cljs.core/not","res39018","p1__39015#","destroy__35413__auto__","reagent.ratom/reactive?","ref","cljs.core.atom","handler","and__4210__auto__","_","js/document","sevenguis.core/circle-menu-1","with-let39020","init39021","res39022","p1__39019#","sevenguis.core/circle-drawer","iter__4611__auto__","s__39025","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","b__39027","cljs.core/chunk-buffer","i__39026","cljs.core/-nth","cljs.core/chunk-append","p1__39023#","cljs.core/chunk-cons","cljs.core/chunk","iter__39024","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","G__39028","sevenguis.core/table-size","cljs.core.map","cljs.core/char","cljs.core.range","sevenguis.core/table-state","sevenguis.core/cell-dependencies","sevenguis.core/active-cell","sevenguis.core/edit-mode","sevenguis.core/table-cell","col","row","coord","cljs.core.keyword","p1__39029#","p1__39030#","p1__39031#","p1__39032#","p1__39033#","sevenguis.core/operations","cljs.core.apply","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core//","sevenguis.core/formula?","s","sevenguis.core/coord?","c","sevenguis.core/operation?","formula","cljs.spec.alpha.valid_QMARK_","cljs.core.subs","rest","cljs.core/last","sevenguis.core/range?","r","cljs.core.nth","cljs.spec.alpha/def-impl","p1__39034#","cljs.core/set","p1__39035#","cljs.core/keys","sevenguis.core/cell-value","table-state","cell","computed","value","or__4212__auto__","sevenguis.core/update-dependencies","dep","cell-dependencies","sevenguis.core/coord-from-range","cljs.pprint/char-code","sevenguis.core/parse-range","parts","start","end","s__39037","xs__6308__auto__","iterys__4607__auto__","s__39039","b__39041","i__39040","iter__39038","fs__4608__auto__","cljs.core.concat","iter__39036","cell-coord","sevenguis.utils/parse-float","sevenguis.core/parse-args","params","args","cljs.core/flatten","p1__39042#","arg","clojure.string/trim","sevenguis.core/compute-formula","op","G__39044","G__39045","fexpr__39043","cljs.core.println","sevenguis.core/change-cell-value","formatted","cljs.core/float?","js/parseFloat","seq__39047","chunk__39048","count__39049","i__39050","vec__39057","c__4638__auto__","cljs.core/chunk-first","vec__39060","cljs.core/next","k","v","p1__39046#","cljs.core/some","sevenguis.core/handle-cell-change","sevenguis.core/set-active-cell","sevenguis.core/cells","cljs.core.doall","cell-value","cell-comp","is-active","p1__39063#","sevenguis.core/github-corner","sevenguis.core/main-page","sevenguis.components/ui-task","sevenguis.core/start","reagent.dom.render","sevenguis.core/init","sevenguis.core/stop","js/console.log"],"sourcesContent":["(ns sevenguis.core\n  (:require\n   [reagent.core         :as r]\n   [reagent.dom          :as rdom]\n   [clojure.string       :as str]\n   [clojure.spec.alpha   :as s]\n   [cljs.pprint          :as pprint]\n   [sevenguis.utils      :as utils]\n   [sevenguis.components :as components]))\n\n;; -------------------------\n;; Task - Counter\n\n(def click-count1 (r/atom 0))\n\n\n(defn counter []\n  [:div.UI-task-center\n   [:label.UI-counter @click-count1]\n   [components/ui-button \"Counter\" #(swap! click-count1 inc)]])\n\n;; -------------------------\n;; Task - Temperature Converter\n\n(def cels       (r/atom \"\"))\n(def cels-valid (r/atom true))\n(def fahr       (r/atom \"\"))\n(def fahr-valid (r/atom true))\n\n\n(defn cels->fahr\n  [temp-str]\n  (let [temp (utils/parse-int temp-str)]\n    (Math/round (+ (* temp (/ 9 5)) 32))))\n\n\n(defn fahr->cels [temp-str]\n  (let [temp (utils/parse-int temp-str)]\n    (Math/round (* (- temp 32) (/ 5 9)))))\n\n\n(defn temperature?\n  \"Check if the input string is a valid value for temperature\"\n  [val]\n  ;; The regex allows an initial `-` and at list one number\n  (and (not (nil? val))\n       (boolean (re-find #\"^-?\\d+$\" val))))\n\n\n(defn temp-converter []\n  [:div.UI-task-center\n   [:div.center-h.margin-h\n    [components/input-change \"input-celsius\"\n     \"text\"\n     \"UI-input-right\"\n     cels\n     (fn [e]\n       (let [input-value (-> e .-target .-value)\n             valid-value (or (temperature? input-value)\n                             (str/blank? input-value))]\n         (reset! cels-valid valid-value)\n         (reset! cels       input-value)\n         (when (and valid-value\n                    (not (str/blank? input-value)))\n           (reset! fahr (cels->fahr input-value)))))\n     @cels-valid]\n    [:label.UI-label-big \"C\"]]\n   [:div.center-h.margin-h\n    [components/input-change \"input-fahreneith\"\n     \"text\"\n     \"UI-input-right\"\n     fahr\n     (fn [e]\n       (let [input-value (-> e .-target .-value)\n             valid-value (or (temperature? input-value)\n                             (str/blank? input-value))]\n         (reset! fahr-valid valid-value)\n         (reset! fahr       input-value)\n         (when (and valid-value\n                    (not (str/blank? input-value)))\n           (reset! cels (fahr->cels input-value)))))\n     @fahr-valid]\n    [:label.UI-label-big \"F\"]]])\n\n;; -------------------------\n;; Task - Flight Booker\n\n(def booking-type     (r/atom \"single\")) ; or double\n\n(def start-date (r/atom (utils/format-date utils/date-now)))\n(def end-date   (r/atom (utils/format-date utils/date-now)))\n\n\n(defn str-to-date\n  \"Transform a date string (dd-MM-yyyy) into a Date object\"\n  [date-str]\n  (let [coll (str/split date-str #\"\\.\")]\n    (js/Date. (str (coll 2) \"-\" (coll 1) \"-\" (coll 0)))))\n\n\n(defn valid-date?\n  \"Check if the string contains a valid formatted date\"\n  [val]\n  ;; Regex for date-string like \"dd.MM.yyyy\"\n  ;; The exercise doesn't require validation to check if the date is before today\n  (boolean (re-find #\"^[\\d]{2}.[\\d]{2}.[\\d]{4}$\" val)))\n\n\n(defn end-after-start?\n  \"Check that end date is after start date\"\n  [start-date end-date]\n  (>= (str-to-date end-date) (str-to-date start-date)))\n\n\n(defn one-way?\n  \"True if the booking is single way\"\n  [booking-type]\n  (= @booking-type \"single\"))\n\n\n(defn flight-combo\n  \"Combobox for choose the type of flight\"\n  [booking-type]\n  [:select {:name      \"flight-combobox\"\n            :value     @booking-type\n            :on-change #(reset! booking-type (-> % .-target .-value))}\n   [:option {:value \"single\"} \"one-way flight\"]\n   [:option {:value \"double\"} \"return flight\"]])\n\n\n(defn flight-booker []\n  (let [start-valid (valid-date? @start-date)\n        end-valid   (valid-date? @end-date)\n        btn-enabled (or (and (one-way? booking-type) start-valid)\n                        (and (not (one-way? booking-type))\n                             start-valid\n                             end-valid\n                             (end-after-start? @start-date @end-date)))]\n    [:div.UI-task-center\n     [flight-combo booking-type]\n     [:div#spacer]\n     [:div\n      [:label \"Start date: \"]\n      [components/input-change\n       \"start-date\"\n       \"text\"\n       \"UI-input-center\"\n       start-date\n       #(reset! start-date (-> % .-target .-value))\n       start-valid]]\n     [:div\n      [:label \"End date: \"]\n      [components/input-change\n       \"end-date\"\n       \"text\"\n       \"UI-input-center\"\n       end-date\n       #(reset! end-date (-> % .-target .-value))\n       end-valid\n       (one-way? booking-type)]]\n     [:div#spacer]\n     [:button.UI-button\n      {:disabled (not btn-enabled)\n       :on-click (fn []\n                   (let [msg (str \"You have booked a return flight from \"\n                                  @start-date\n                                  (when (not (one-way? booking-type))\n                                    (str \" to \" @end-date)))]\n                     (js/alert msg)))}\n      ;; Disable the button if the end-date is before the start-date or start-date is not valid\n      \"Book\"]]))\n\n;; -------------------------\n;; Task - Timer\n\n(def timer-duration (r/atom 15))\n(def timer-value    (r/atom 0))\n\n\n(defn round\n  \"Round a number to precision decimal values.\"\n  [number, precision]\n  (let [scale (Math/pow 10 precision)]\n    (-> number\n        (* scale)\n        Math/round\n        (/ scale))))\n\n\n(defn display-timer []\n  (let [time-str (.toFixed @timer-value 1)\n        meter-value (if (> @timer-duration 0)\n                      (/ @timer-value @timer-duration)\n                      1)]\n    [:div.UI-task-center\n     [:div.UI-task-section\n      [:span.UI-label \"Elapsed Time\"]\n      [:meter {:value meter-value\n               :style {:flex \"1 1 0%\"}}]]\n     [:div.UI-task-section\n      [:span (str time-str \"s\")]]\n     [:div.UI-task-section\n      [:span.UI-label \"Duration\"]\n      [components/input-range 0 30 @timer-duration #(reset! timer-duration (-> % .-target .-value))]]\n     [:div#spacer]\n     [:div\n      [components/ui-button \"Reset Timer\" #(reset! timer-value 0)]]]))\n\n\n(defn update-timer []\n  (swap! timer-value\n         (fn [prev-value]\n           ;; prevValue >= duration ? prevValue : round(prevValue + 0.1, 1)\n           (if (>= prev-value @timer-duration)\n             prev-value\n             (round (+ prev-value 0.1) 1)))))\n\n\n(defn timer []\n  (js/setInterval update-timer 100)\n  [display-timer])\n\n;; -------------------------\n;; Task - CRUD\n\n(def crud-filter  (r/atom \"\"))\n(def crud-name    (r/atom \"\"))\n(def crud-surname (r/atom \"\"))\n(def crud-items   (r/atom [{:name     \"Harry\"\n                            :surname  \"Potter\"}\n                           {:name     \"Hermione\"\n                            :surname  \"Granger\"}\n                           {:name     \"Ron\"\n                            :surname  \"Weasley\"}]))\n(def crud-selected-item (r/atom nil))\n\n\n(defn filter-items [items, filter-str]\n  (let [filter-lower (str/lower-case filter-str)]\n    (into [] (filter #(or (str/includes? (str/lower-case (get % :surname)) filter-lower)\n                          (str/includes? (str/lower-case (get % :name))    filter-lower))\n                     items))))\n\n\n(defn crud []\n  [:div.UI-task-center\n   [:div.UI-task-section\n    [:span.UI-label \"Filter prefix:\"]\n    [components/ui-input \"text\" crud-filter]]\n   [:div.UI-task-section.UI-task-section--with-spaces\n    [components/ui-list-box\n     (filter-items @crud-items @crud-filter)\n     #(reset! crud-selected-item (-> % .-target .-value))]\n    [:div.UI-space-around\n     [:div.UI-form-inline\n      [:span.UI-label \"Name:\"]\n      [components/ui-input \"text\" crud-name]]\n     [:div.UI-form-inline\n      [:span.UI-label \"Surname:\"]\n      [components/ui-input \"text\" crud-surname]]]]\n   [:div#spacer]\n   [:div.UI-task-section\n    [components/ui-button \"Create\" (fn []\n                          (when (and (seq @crud-name)\n                                     (seq @crud-surname))\n                            (swap! crud-items\n                                   conj {:name    @crud-name\n                                         :surname @crud-surname})\n                            (reset! crud-name \"\")\n                            (reset! crud-surname \"\")))]\n    [components/ui-button \"Update\" (fn []\n                          (when (and (seq @crud-name)\n                                     (seq @crud-surname))\n                            (swap! crud-items\n                                   assoc\n                                   (int @crud-selected-item)\n                                   {:name    @crud-name\n                                    :surname @crud-surname})))]\n    [components/ui-button \"Delete\" (fn []\n                          (let [item-idx (int @crud-selected-item)]\n                            (when (and (>= item-idx 0) (< item-idx (count @crud-items)))\n                              (swap! crud-items utils/vec-remove item-idx))))]]])\n\n;; -------------------------\n;; Task - Circle Drawer\n\n;; Circle map definition\n;;   {:x  (-> e .-nativeEvent .-offsetX\n;;    :y  (-> e .-nativeEvent .-offsetY)\n;;    :d  30\n;;    :id (.getTime (js/Date.)))}\n(def circles-state   (r/atom {:history-idx 0\n                              :history     [[]]}))\n\n(def selected-circle (r/atom nil))\n\n;; possible frames state are:\n;; 0 - hidden\n;; 1 - menu options\n;; 2 - slider\n(def current-diameter-frame (r/atom {:state    0\n                                     :position {:x 0 :y 0}}))\n\n\n(defn reset-diameter-frame []\n  (reset! current-diameter-frame {:state    0\n                                  :position {:x 0 :y 0}}))\n\n\n(defn current-state\n  \"Return the current history state\"\n  []\n  (get-in @circles-state [:history (:history-idx @circles-state)]))\n\n\n(defn delete-future\n  \"Delete future history from the current index\"\n  []\n  ;; check if there's future to delete, to avoid subvec errors\n  (when (not= (count (:history @circles-state))\n              (dec (:history-idx @circles-state)))\n    (swap! circles-state update-in [:history] (fn [past-history]\n                                                (subvec past-history\n                                                        0\n                                                        ;; We incr the history index because the first\n                                                        ;; state an empty array, but count as 1\n                                                        (inc (:history-idx @circles-state)))))))\n\n\n(defn add-state\n  \"Create a state using the function and append it to the history\"\n  [create-state]\n  (delete-future)\n  (swap! circles-state update-in [:history-idx] inc)\n  ;; The future is a function of the past - Rich Hickey\n  ;; We run the creator function that get the last state of the app and append his modification\n  ;; returning a new state that will be appended in the history.\n  (swap! circles-state update-in [:history] (fn [past-history]\n                                              (conj past-history\n                                                    (create-state (peek past-history))))))\n\n\n(defn undo\n  \"Decrement the history index if > 0\"\n  []\n  (when (> (:history-idx @circles-state) 0)\n    (swap! circles-state update-in [:history-idx] dec)))\n\n\n(defn redo\n  \"Increment the history index if < length of history\"\n  []\n  (when (< (inc (:history-idx @circles-state))\n           (count (:history @circles-state)))\n    (swap! circles-state update-in [:history-idx] inc)))\n\n\n(defn add-circle\n  \"Create a new circle and push it into the application state history\"\n  [e]\n  (let [new-circle {:x  (-> e .-nativeEvent .-offsetX)\n                    :y  (-> e .-nativeEvent .-offsetY)\n                    :d  30 ; default circle diameter\n                    :id (.getTime (js/Date.))}]\n    (add-state (fn [prev-state]\n                 (conj prev-state new-circle)))))\n\n\n(defn show-circle-menu [e circle]\n  (let [pos {:x  (-> e .-nativeEvent .-pageX)\n             :y  (-> e .-nativeEvent .-pageY)}]\n    (utils/prevent-default e)\n    (reset! selected-circle circle)\n    (reset! current-diameter-frame {:state 1\n                                    :position pos})))\n\n\n(defn clone-current-history\n  \"Clone the current history in a new state\"\n  []\n  (let [idx (.indexOf (current-state) @selected-circle)]\n    (add-state (fn [prev-state] (assoc prev-state idx @selected-circle)))))\n\n\n(defn update-current-range\n  \"Update the current range only into the history, without adding a new one\"\n  [e]\n  (let [d   (int (-> e .-target .-value))                ; integer diameter\n        idx (.indexOf (current-state) @selected-circle)] ; index of selected circle into app state\n    (swap! circles-state assoc-in [:history (:history-idx @circles-state) idx :d] d)\n    (swap! selected-circle assoc-in [:d] d)))\n\n\n(defn circle-menu-2 []\n  (r/with-let [pos        (:position @current-diameter-frame)\n               ref        (atom nil) ; menu element ref\n               handler    (fn [e]\n                            (if (and @ref (not (.contains @ref (.-target e))))\n                              (reset-diameter-frame)\n                              (utils/prevent-default e)))\n               _          (.addEventListener js/document \"click\" handler)]\n    [:div.UI-menu {:style {:top  (:y pos) :left (:x pos)}\n                   :ref   #(reset! ref %)}\n     \"Adjust Diameter\"\n     ;; Update the diameter in the history only when the user stop dragging the slider,\n     ;; otherwhise update it only \"locally\"\n     [:input {:type        \"range\"\n              :min         2\n              :max         100\n              :value       (:d @selected-circle)\n              :on-change   update-current-range\n              :on-mouse-down clone-current-history}]]\n    (finally\n      (.removeEventListener js/document \"click\" handler))))\n\n\n(defn circle-menu-1 []\n  (r/with-let [pos        (:position @current-diameter-frame)\n               ref        (atom nil) ; menu element ref\n               handler    (fn [e]\n                            (if (and @ref (not (.contains @ref (.-target e))))\n                              (reset-diameter-frame)\n                              (swap! current-diameter-frame update-in [:state] inc)))\n               _          (.addEventListener js/document \"click\" handler)]\n    [:div.UI-menu {:style {:top  (:y pos) :left (:x pos)}\n                   :ref   #(reset! ref %)}\n     \"Adjust Diameter\"]\n    (finally\n      (.removeEventListener js/document \"click\" handler))))\n\n\n(defn circle-drawer []\n  [:div.UI-circle-drawer\n   [:div.UI-form-inline\n    [components/ui-button \"Undo\" #(undo)]\n    [components/ui-button \"Redo\" #(redo)]]\n   [:div.UI-canvas {:on-click add-circle}\n    (for [circle (current-state)]\n      [:div.UI-circle {:key (:id circle)\n                       :data-attr ()\n                       :on-click #(show-circle-menu % circle)\n                       :style {:top    (:y circle)\n                               :left   (:x circle)\n                               :width  (:d circle)\n                               :height (:d circle)}}])]\n   ;; show on not the diameter range\n   (case (:state @current-diameter-frame)\n     2 [circle-menu-2]\n     1 [circle-menu-1]\n     nil)])\n\n;; -------------------------\n;; Task - Cells\n\n;; Define the table sizes as costants\n(def table-size {:cols (map char (range (.charCodeAt \\A 0) (inc (.charCodeAt \\Z 0))))\n                 :rows (range 0 100)})\n\n\n;; Save the state of each cell using a keyword {:A0 {} :A1 {} ...}\n;; in this way is cheap updating and retriving data using one single atom\n(def table-state (r/atom {:A0 {:value \"1\" :computed 1}\n                          :A1 {:value \"2\" :computed 2}\n                          :A2 {:value \"=SUM(A0:A1, 2)\" :computed 5}}))\n\n;; List of cells that a cell computed formula depends on\n(def cell-dependencies (r/atom {}))\n\n(def active-cell (r/atom nil))    ; Current active cell\n(def edit-mode   (r/atom false)) ; Active cell is in editing mode\n\n\n(defn table-cell [col row]\n  (let [coord (str col row)]\n    (get @table-state (keyword coord))))\n\n\n(def operations\n  {:SUM #(apply + %)\n   :SUB #(apply - %)\n   :MUL #(apply * %)\n   :DIV #(apply / %)\n   :AVG #(/ (apply + %)\n            (count %))})\n\n\n(defn formula?\n  \"True if the cell value is a formula\"\n  [s]\n  (= (first s) \"=\"))\n\n\n;; A0, A0:B4\n(defn coord?\n  \"True if the string is a valid coordinate\"\n  [c]\n  (when (string? c)\n    (boolean (re-find #\"^[A-Z]{1}[0-9]{1,2}$\" c))))\n\n\n(defn operation?\n  \"True if the formula contains a valid operation\"\n  [formula]\n  (and (s/valid? :formula/op (subs formula 1 4))\n       (let [rest (subs formula 4)]\n         (and (= (first rest) \"(\")\n              (= (last rest) \")\")))))\n\n\n(defn range?\n  \"True if the string is a valid range\"\n  [r]\n  (and (string? r)\n       (= (count r) 5)\n       (= (nth r 2) \":\")\n       (coord? (subs r 0 2))\n       (coord? (subs r 3 5))))\n\n\n;; Integer and Decimal number\n(s/def :type/number\n  #(boolean (re-find #\"^\\d*\\.?\\d+$\" %)))\n\n\n;; SUM, SUB, MUL, DIV, AVG\n(s/def :formula/op\n  (set (map #(subs (str %) 1) (keys operations))))\n\n\n(defn cell-value\n  \"Get cell value using coordinates\"\n  [coord table-state]\n  (let [cell     (get @table-state (keyword coord))\n        computed (get cell :computed)\n        value    (get cell :value)]\n    (or computed\n        (when (and (seq value)\n                   (s/valid? :type/number value))\n          value))))\n\n\n(defn update-dependencies\n  \"Add a dependency to the cell dependencies state\"\n  [dep coord cell-dependencies]\n  (swap! cell-dependencies update-in [(keyword coord)] conj dep))\n\n\n(defn coord-from-range\n  \"Get column coordinate using spec map\"\n  [r]\n  (let [col (pprint/char-code (first r))\n        row (utils/parse-int (last r))]\n    {:col col :row row}))\n\n\n(defn parse-range\n  \"Parse and return a range\"\n  [value coord table-state cell-dependencies]\n  (let [parts (str/split value #\"\\:\")\n        start (coord-from-range (nth parts 0))\n        end   (coord-from-range (nth parts 1))]\n    ;; iterate for each column,row store the cell value into an array\n    (for [c (into [] (range (:col start) (inc (:col end))))\n          r (into [] (range (:row start) (inc (:row end))))]\n      (let [cell-coord (str (char c) r)\n            value      (cell-value cell-coord table-state)]\n        (update-dependencies cell-coord coord cell-dependencies)\n        (or (when (or (number? value) (s/valid? :type/number value))\n              (utils/parse-float value)) 0)))))\n\n\n(defn parse-args\n  \"Parse operation arguments\"\n  [params coord table-state cell-dependencies]\n  (let [args (str/split params #\",\")]\n    (if (> (count args) 1)\n      ;; parse all args and store them in a single vector\n      ;; in case or range, `flatten` remove the nested vector\n      (into [] (flatten (map #(parse-args % coord table-state cell-dependencies) args)))\n      (let [arg (str/trim (first args))]\n        ;; compute numbers, ranges, cells\n        (cond\n          (s/valid? :type/number arg) (utils/parse-float arg)\n          (s/valid? range? arg)       (parse-range arg coord table-state cell-dependencies)\n          (s/valid? coord? arg)       (do\n                                        (update-dependencies arg coord cell-dependencies)\n                                        ;; convert string number into numeric values\n                                        (let [value (cell-value arg table-state)]\n                                          (if (or (number? value) (s/valid? :type/number value))\n                                            (utils/parse-float value)\n                                            value))))))))\n\n\n;; Formulas Example:\n;; =A0\n;; =SUM(A0:B12)\n;; =SUM(A0:B4, 12)\n(defn compute-formula\n  \"Return the computed cell formula content \n   and update the cell-dependencies state while parsing the arguments.\"\n  [formula coord table-state cell-dependencies]\n  (if (operation? formula)\n    ;; if formula contains operations, apply them to the list of arguments\n    (let [op     (get operations (keyword (subs formula 1 4)))\n          params (subs formula 5 (dec (count formula)))\n          args   (parse-args params coord table-state cell-dependencies)]\n      (op args))\n    ;; otherwise, if argument is cell-coord, get that cell value\n    (let [arg (subs formula 1)]\n      (when (s/valid? coord? arg)\n        ((update-dependencies arg coord cell-dependencies)\n         (println (cell-value arg table-state))\n         (cell-value arg table-state))))))\n\n\n(defn change-cell-value [col row value]\n  (let [coord (str col row)]\n    ;; update/create the cell value in the table-state\n    (swap! table-state assoc-in [(keyword coord) :value] value)\n    ;; reset cell dependencies array\n    (swap! cell-dependencies assoc (keyword coord) [])\n    (if (formula? value)\n      ;; compute formula or set :computed to nil\n      (let [computed (compute-formula value coord table-state cell-dependencies)\n            formatted (if (float? computed)\n                        (js/parseFloat (.toFixed computed 5))\n                        computed)]\n        (swap! table-state\n               assoc-in\n               [(keyword coord) :computed]\n               formatted))\n      (swap! table-state assoc-in [(keyword coord) :computed] nil))\n    ;; re-compute all depented cell value\n    (doseq [[k v] @cell-dependencies]\n      ;; only when other cells are dependent on this one\n      (when (some #(= coord %) v)\n        (swap! table-state\n               assoc-in\n               [(keyword k) :computed]\n               (compute-formula (get-in @table-state [(keyword k) :value])\n                                k\n                                table-state\n                                cell-dependencies))))))\n\n\n(defn handle-cell-change [col row value]\n  (change-cell-value col row value)\n  (reset! edit-mode false))\n\n\n(defn set-active-cell [col row]\n  (let [coord (str col row)]\n    (reset! active-cell coord)\n    (reset! edit-mode true)))\n\n\n(defn cells []\n  [:div\n   [:div.UI-table-container\n    [:table.UI-table\n     [:tbody\n      [:tr.UI-table-tr-th\n       [:th.UI-table-th.UI-table-th-small]\n       (doall\n        (map\n         (fn [col]\n           [:th.UI-table-th {:key (str \"header-\" col)}\n            [:div.UI-table-cell-header col]])\n         (:cols table-size)))]\n      ;; used doall for performance reasons\n      (doall\n       (map\n        (fn [row]\n          [:tr {:key (str \"row-\" row)}\n           [:td.UI-table-header-vertical row]\n           (doall\n            (map\n             (fn [col]\n               (let [cell-coord (str col row)\n                     cell       (table-cell col row)\n                     cell-value (get cell :value)\n                     cell-comp  (get cell :computed)\n                     is-active  (= @active-cell cell-coord)]\n                 [:td.UI-table-td {:key (str  \"cell-\" col \"-\" row)}\n                  [:div.UI-table-cell {:on-click #(set-active-cell col row)}\n                   (if (and is-active @edit-mode)\n                     ;; show input if cell is active and is edit mode\n                     [:input.UI-table-cell-input\n                      {:default-value cell-value\n                       :auto-focus    true\n                       :on-blur       #(handle-cell-change col row (-> % .-target .-value))}]\n                     (or cell-comp cell-value))]]))\n             (:cols table-size)))])\n        (:rows table-size)))]]]\n   [:div.UI-table-desc\n    (str \"Click inside a cell to edit its formula.\"\n         \" Press enter to apply. Click outside the cell or press escape to cancel.\"\n         \" Here are some example contents:\"\n         \" '5.5', 'Some text', '=A1', '=SUM(B2:C4)', '=DIV(C1, 5)'.\"\n         \" Supported operations are SUM, SUB, MUL, DIV, AVG.\")]])\n\n;; -------------------------\n;; Page components\n\n(defn github-corner []\n  [:a.github-corner\n   {:aria-label \"View source on GitHub\"\n    :target \"_blank\"\n    :href \"https://github.com/elias94/7guis-clojurescript\"}\n   [:svg\n    {:aria-hidden \"true\"\n     :style {:fill \"#151513\" :color \"#fff\" :position \"absolute\" :top 0 :border 0 :right 0}\n     :view-box \"0 0 250 250\"\n     :height \"80\"\n     :width \"80\"}\n    [:path {:d \"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"}]\n    [:path.octo-arm\n     {:style {:transform-origin \"130px 106px\"}\n      :fill \"currentColor\"\n      :d\n      \"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"}]\n    [:path.octo-body\n     {:fill \"currentColor\"\n      :d\n      \"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"}]]])\n\n(defn main-page []\n  [:span.main\n   [github-corner]\n   [:h1.page-title \"7GUIs in Clojurescript with Reagent\"]\n   [:p\n    \"This is a live version of 7GUIs with \"\n    [:a {:href \"https://clojurescript.org\"\n         :target \"_blank\"}\n     \"Clojurescript\"]\n    \" and \"\n    [:a {:href \"https://reagent-project.github.io/\"\n         :target \"_blank\"}\n     \"Reagent\"]\n    \".\"\n    [:br]\n    [:small [:a {:href \"https://github.com/elias94/7guis-clojurescript\"\n                 :target \"_blank\"}\n             \"(source)\"]]]\n   [components/ui-task \"Counter\"               counter]\n   [components/ui-task \"Temperature Converter\" temp-converter]\n   [components/ui-task \"Flight Booker\"         flight-booker]\n   [components/ui-task \"Timer\"                 timer]\n   [components/ui-task \"CRUD\"                  crud]\n   [components/ui-task \"Circle Drawer\"         circle-drawer]\n   [components/ui-task \"Cells\"                 cells]])\n\n\n(defn start []\n  (rdom/render [main-page]\n               (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}