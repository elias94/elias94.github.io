{"version":3,"sources":["sevenguis/core.cljs"],"mappings":"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","names":["sevenguis.core/router","reitit.frontend.router","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","sevenguis.core/path-for","p__52574","vec__52575","cljs.core.nth","seq52572","G__52573","cljs.core/first","cljs.core/next","self__4816__auto__","route","params","reitit.frontend.match_by_name","sevenguis.core/ui-task","title","task","G__52579","sevenguis.core/ui-button","js/Error","on-click","sevenguis.core.ui_button","disabled","cljs.core.merge","cljs.core/deref","p1__52580#","sevenguis.core/ui-input","input-type","input-value","cljs.core/reset!","sevenguis.core/ui-list-box","items","on-change","iter__4622__auto__","s__52582","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","cljs.core/count","b__52584","cljs.core/chunk-buffer","i__52583","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52581","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","index","cljs.core.range","item","cljs.core.get","item-name","item-last","item-key","sevenguis.utils/escape-str","item-str","G__52587","sevenguis.core/input-change","input-name","input-class","on-change-evt","sevenguis.core.input_change","is-valid","p1__52585#","sevenguis.core/input-range","min","max","value","sevenguis.core/click-count1","reagent.core.atom","sevenguis.core/counter","cljs.core.swap_BANG_","cljs.core/inc","sevenguis.core/cels","sevenguis.core/cels-valid","sevenguis.core/fahr","sevenguis.core/fahr-valid","sevenguis.core/cels->fahr","temp-str","temp","sevenguis.utils/parse-int","Math/round","sevenguis.core/fahr->cels","sevenguis.core/temperature?","val","cljs.core/boolean","cljs.core/re-find","sevenguis.core/temp-converter","e","valid-value","clojure.string/blank?","sevenguis.core/booking-type","sevenguis.core/start-date","sevenguis.utils.format_date","sevenguis.utils/date-now","sevenguis.core/end-date","sevenguis.core/str-to-date","date-str","coll","clojure.string.split","js/Date","sevenguis.core/valid-date?","sevenguis.core/end-after-start?","start-date","end-date","sevenguis.core/one-way?","booking-type","cljs.core._EQ_","p1__52588#","sevenguis.core/flight-combo","sevenguis.core/flight-booker","p1__52589#","p1__52590#","start-valid","end-valid","btn-enabled","msg","js/alert","sevenguis.core/timer-duration","sevenguis.core/timer-value","sevenguis.core/round","number","precision","scale","Math/pow","sevenguis.core/display-timer","p1__52591#","time-str","meter-value","sevenguis.core/update-timer","prev-value","sevenguis.core/timer","js/setInterval","sevenguis.core/crud-filter","sevenguis.core/crud-name","sevenguis.core/crud-surname","sevenguis.core/crud-items","sevenguis.core/crud-selected-item","sevenguis.core/filter-items","filter-str","filter-lower","clojure.string/lower-case","cljs.core.into","p1__52592#","cljs.core.filter","clojure.string/includes?","p1__52593#","sevenguis.core/crud","cljs.core/conj","cljs.core/assoc","item-idx","sevenguis.utils/vec-remove","sevenguis.core/circles-state","sevenguis.core/selected-circle","sevenguis.core/current-diameter-frame","sevenguis.core/reset-diameter-frame","sevenguis.core/current-state","cljs.core.get_in","sevenguis.core/delete-future","cljs.core.not_EQ_","cljs.core/update-in","past-history","cljs.core.subvec","sevenguis.core/add-state","create-state","cljs.core.conj","G__52594","cljs.core/peek","sevenguis.core/undo","cljs.core/dec","sevenguis.core/redo","sevenguis.core/add-circle","new-circle","prev-state","sevenguis.core/show-circle-menu","circle","pos","sevenguis.utils/prevent-default","sevenguis.core/clone-current-history","idx","cljs.core.assoc","sevenguis.core/update-current-range","d","cljs.core/assoc-in","sevenguis.core/circle-menu-2","with-let52596","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__52332__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init52597","cljs.core/not","res52598","p1__52595#","destroy__52331__auto__","reagent.ratom/reactive?","ref","cljs.core.atom","handler","and__4221__auto__","_","js/document","sevenguis.core/circle-menu-1","with-let52600","init52601","res52602","p1__52599#","sevenguis.core/circle-drawer","s__52605","b__52607","i__52606","p1__52603#","iter__52604","G__52608","sevenguis.core/table-size","cljs.core.map","cljs.core/char","sevenguis.core/table-state","sevenguis.core/cell-dependencies","sevenguis.core/active-cell","sevenguis.core/edit-mode","sevenguis.core/table-cell","col","row","coord","cljs.core.keyword","p1__52609#","p1__52610#","p1__52611#","p1__52612#","p1__52613#","sevenguis.core/operations","cljs.core.apply","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core//","sevenguis.core/formula?","s","sevenguis.core/coord?","c","sevenguis.core/operation?","formula","cljs.spec.alpha.valid_QMARK_","cljs.core.subs","rest","cljs.core/last","sevenguis.core/range?","r","cljs.spec.alpha/def-impl","p1__52614#","cljs.core/set","p1__52615#","cljs.core/keys","sevenguis.core/cell-value","table-state","cell","computed","or__4223__auto__","sevenguis.core/update-dependencies","dep","cell-dependencies","sevenguis.core/coord-from-range","cljs.pprint/char-code","sevenguis.core/parse-range","parts","start","end","s__52617","xs__6308__auto__","iterys__4618__auto__","s__52619","b__52621","i__52620","iter__52618","fs__4619__auto__","cljs.core.concat","iter__52616","cell-coord","sevenguis.utils/parse-float","sevenguis.core/parse-args","args","cljs.core/flatten","p1__52622#","arg","clojure.string/trim","sevenguis.core/compute-formula","op","G__52624","G__52625","fexpr__52623","cljs.core.println","sevenguis.core/change-cell-value","formatted","cljs.core/float?","js/parseFloat","seq__52627","chunk__52628","count__52629","i__52630","vec__52637","c__4649__auto__","cljs.core/chunk-first","vec__52640","k","v","p1__52626#","cljs.core/some","sevenguis.core/handle-cell-change","sevenguis.core/set-active-cell","sevenguis.core/cells","cljs.core.doall","cell-value","cell-comp","is-active","p1__52643#","sevenguis.core/github-corner","sevenguis.core/home-page","sevenguis.core/page-for","G__52644","cljs.core/Keyword","sevenguis.core/current-page","page","reagent.session/get","sevenguis.core/mount-root","reagent.dom.render","sevenguis.core/init!","accountant.core/configure-navigation!","path","match","reitit.frontend/match-by-path","current-page","route-params","reagent.session/put!","clerk.core/navigate-page!","accountant.core/dispatch-current!"],"sourcesContent":["(ns sevenguis.core\n  (:require\n   [clojure.string     :as str]\n   [reagent.core       :as r]\n   [reagent.dom        :as rdom]\n   [reagent.session    :as session]\n   [reitit.frontend    :as reitit]\n   [clerk.core         :as clerk]\n   [accountant.core    :as accountant]\n   [clojure.spec.alpha :as s]\n   [cljs.pprint        :as pprint]\n   [sevenguis.utils    :as utils]))\n\n;; -------------------------\n;; Routes\n\n(def router\n  (reitit/router\n   [[\"/\" :index]\n    [\"/items\"\n     [\"\" :items]\n     [\"/:item-id\" :item]]\n    [\"/about\" :about]]))\n\n\n(defn path-for [route & [params]]\n  (if params\n    (:path (reitit/match-by-name router route params))\n    (:path (reitit/match-by-name router route))))\n\n;; -------------------------\n;; UI Components\n\n(defn ui-task\n  \"Component to wrap a single task\"\n  [title task]\n  [:div {:class \"UI-task\"}\n   [:h2 title]\n   [:div {:class \"UI-task-container\"} [task]]])\n\n\n(defn ui-button\n  \"Button with an on-click event handler\"\n  ([title on-click]\n   (ui-button title on-click false))\n  ([title on-click disabled]\n   [:input (merge\n            {:type     \"button\"\n             :class    \"UI-button\"\n             :value    title\n             :on-click #(on-click)}\n            (when disabled\n              {:disabled true}))]))\n\n\n(defn ui-input\n  \"Simple input element\"\n  [input-type input-value]\n  [:input {:type      input-type\n           :value     @input-value\n           :class     \"UI-input\"\n           :on-change #(reset! input-value (-> % .-target .-value))}])\n\n\n(defn ui-list-box\n  \"List box made of select and different options\"\n  [items on-change]\n  [:select {:size      4\n            :class     \"UI-list-box\"\n            :on-change on-change}\n   (for [index (range (count items))]\n     (let [item      (get items index)\n           item-name (get item :name)\n           item-last (get item :surname)\n           item-key  (str \"item-\"\n                          (utils/escape-str item-name)\n                          \"-\"\n                          (utils/escape-str item-last))\n           item-str  (str item-name \", \" item-last)]\n       [:option {:name  item-key\n                 :key   item-key\n                 :value index} item-str]))])\n\n\n(defn input-change\n  \"An full input element with callback on change, class, validation, disable, etc.\"\n  ([input-name input-type input-class input-value on-change-evt]\n   (input-change input-name input-type input-class input-value on-change-evt true false))\n  ([input-name input-type input-class input-value on-change-evt is-valid]\n   (input-change input-name input-type input-class input-value on-change-evt is-valid false))\n  ([input-name input-type input-class input-value on-change-evt is-valid disabled]\n   [:input (merge {:type      input-type\n                   :name      input-name\n                   :value     @input-value\n                   :class     (str \"UI-input \" input-class (when (false? is-valid) \" input-error\"))\n                   :on-change #(on-change-evt %)}\n                  (when disabled\n                    {:disabled true}))]))\n\n\n(defn input-range\n  [min max value on-change]\n  [:input {:type      \"range\"\n           :min       min\n           :max       max\n           :value     value\n           :on-change on-change}])\n\n;; -------------------------\n;; Task - Counter\n\n(def click-count1 (r/atom 0))\n\n\n(defn counter []\n  [:div.UI-task-center\n   [:label.UI-counter @click-count1]\n   [ui-button \"Counter\" #(swap! click-count1 inc)]])\n\n;; -------------------------\n;; Task - Temperature Converter\n\n(def cels       (r/atom \"\"))\n(def cels-valid (r/atom true))\n(def fahr       (r/atom \"\"))\n(def fahr-valid (r/atom true))\n\n\n(defn cels->fahr\n  [temp-str]\n  (let [temp (utils/parse-int temp-str)]\n    (Math/round (+ (* temp (/ 9 5)) 32))))\n\n\n(defn fahr->cels [temp-str]\n  (let [temp (utils/parse-int temp-str)]\n    (Math/round (* (- temp 32) (/ 5 9)))))\n\n\n(defn temperature?\n  \"Check if the input string is a valid value for temperature\"\n  [val]\n  ;; The regex allows an initial `-` and at list one number\n  (and (not (nil? val))\n       (boolean (re-find #\"^-?\\d+$\" val))))\n\n\n(defn temp-converter []\n  [:div.UI-task-center\n   [:div.center-h.margin-h\n    [input-change \"input-celsius\"\n     \"text\"\n     \"UI-input-right\"\n     cels\n     (fn [e]\n       (let [input-value (-> e .-target .-value)\n             valid-value (or (temperature? input-value)\n                             (str/blank? input-value))]\n         (reset! cels-valid valid-value)\n         (reset! cels       input-value)\n         (when (and valid-value\n                    (not (str/blank? input-value)))\n           (reset! fahr (cels->fahr input-value)))))\n     @cels-valid]\n    [:label.UI-label-big \"C\"]]\n   [:div.center-h.margin-h\n    [input-change \"input-fahreneith\"\n     \"text\"\n     \"UI-input-right\"\n     fahr\n     (fn [e]\n       (let [input-value (-> e .-target .-value)\n             valid-value (or (temperature? input-value)\n                             (str/blank? input-value))]\n         (reset! fahr-valid valid-value)\n         (reset! fahr       input-value)\n         (when (and valid-value\n                    (not (str/blank? input-value)))\n           (reset! cels (fahr->cels input-value)))))\n     @fahr-valid]\n    [:label.UI-label-big \"F\"]]])\n\n;; -------------------------\n;; Task - Flight Booker\n\n(def booking-type     (r/atom \"single\")) ; or double\n\n(def start-date (r/atom (utils/format-date utils/date-now)))\n(def end-date   (r/atom (utils/format-date utils/date-now)))\n\n\n(defn str-to-date\n  \"Transform a date string (dd-MM-yyyy) into a Date object\"\n  [date-str]\n  (let [coll (str/split date-str #\"\\.\")]\n    (js/Date. (str (coll 2) \"-\" (coll 1) \"-\" (coll 0)))))\n\n\n(defn valid-date?\n  \"Check if the string contains a valid formatted date\"\n  [val]\n  ;; Regex for date-string like \"dd.MM.yyyy\"\n  ;; The exercise doesn't require validation to check if the date is before today\n  (boolean (re-find #\"^[\\d]{2}.[\\d]{2}.[\\d]{4}$\" val)))\n\n\n(defn end-after-start?\n  \"Check that end date is after start date\"\n  [start-date end-date]\n  (>= (str-to-date end-date) (str-to-date start-date)))\n\n\n(defn one-way?\n  \"True if the booking is single way\"\n  [booking-type]\n  (= @booking-type \"single\"))\n\n\n(defn flight-combo\n  \"Combobox for choose the type of flight\"\n  [booking-type]\n  [:select {:name      \"flight-combobox\"\n            :value     @booking-type\n            :on-change #(reset! booking-type (-> % .-target .-value))}\n   [:option {:value \"single\"} \"one-way flight\"]\n   [:option {:value \"double\"} \"return flight\"]])\n\n\n(defn flight-booker []\n  (let [start-valid (valid-date? @start-date)\n        end-valid   (valid-date? @end-date)\n        btn-enabled (or (and (one-way? booking-type) start-valid)\n                        (and (not (one-way? booking-type))\n                             start-valid\n                             end-valid\n                             (end-after-start? @start-date @end-date)))]\n    [:div.UI-task-center\n     [flight-combo booking-type]\n     [:div#spacer]\n     [:div\n      [:label \"Start date: \"]\n      [input-change\n       \"start-date\"\n       \"text\"\n       \"UI-input-center\"\n       start-date\n       #(reset! start-date (-> % .-target .-value))\n       start-valid]]\n     [:div\n      [:label \"End date: \"]\n      [input-change\n       \"end-date\"\n       \"text\"\n       \"UI-input-center\"\n       end-date\n       #(reset! end-date (-> % .-target .-value))\n       end-valid\n       (one-way? booking-type)]]\n     [:div#spacer]\n     [:button.UI-button\n      {:disabled (not btn-enabled)\n       :on-click (fn []\n                   (let [msg (str \"You have booked a return flight from \"\n                                  @start-date\n                                  (when (not (one-way? booking-type))\n                                    (str \" to \" @end-date)))]\n                     (js/alert msg)))}\n      ;; Disable the button if the end-date is before the start-date or start-date is not valid\n      \"Book\"]]))\n\n;; -------------------------\n;; Task - Timer\n\n(def timer-duration (r/atom 15))\n(def timer-value    (r/atom 0))\n\n\n(defn round\n  \"Round a number to precision decimal values.\"\n  [number, precision]\n  (let [scale (Math/pow 10 precision)]\n    (-> number\n        (* scale)\n        Math/round\n        (/ scale))))\n\n\n(defn display-timer []\n  (let [time-str (.toFixed @timer-value 1)\n        meter-value (if (> @timer-duration 0)\n                      (/ @timer-value @timer-duration)\n                      1)]\n    [:div.UI-task-center\n     [:div.UI-task-section\n      [:span.UI-label \"Elapsed Time\"]\n      [:meter {:value meter-value\n               :style {:flex \"1 1 0%\"}}]]\n     [:div.UI-task-section\n      [:span (str time-str \"s\")]]\n     [:div.UI-task-section\n      [:span.UI-label \"Duration\"]\n      [input-range 0 30 @timer-duration #(reset! timer-duration (-> % .-target .-value))]]\n     [:div#spacer]\n     [:div\n      [ui-button \"Reset Timer\" #(reset! timer-value 0)]]]))\n\n\n(defn update-timer []\n  (swap! timer-value\n         (fn [prev-value]\n           ;; prevValue >= duration ? prevValue : round(prevValue + 0.1, 1)\n           (if (>= prev-value @timer-duration)\n             prev-value\n             (round (+ prev-value 0.1) 1)))))\n\n\n(defn timer []\n  (js/setInterval update-timer 100)\n  [display-timer])\n\n;; -------------------------\n;; Task - CRUD\n\n(def crud-filter  (r/atom \"\"))\n(def crud-name    (r/atom \"\"))\n(def crud-surname (r/atom \"\"))\n(def crud-items   (r/atom [{:name     \"Harry\"\n                            :surname  \"Potter\"}\n                           {:name     \"Hermione\"\n                            :surname  \"Granger\"}\n                           {:name     \"Ron\"\n                            :surname  \"Weasley\"}]))\n(def crud-selected-item (r/atom nil))\n\n\n(defn filter-items [items, filter-str]\n  (let [filter-lower (str/lower-case filter-str)]\n    (into [] (filter #(or (str/includes? (str/lower-case (get % :surname)) filter-lower)\n                          (str/includes? (str/lower-case (get % :name))    filter-lower))\n                     items))))\n\n\n(defn crud []\n  [:div.UI-task-center\n   [:div.UI-task-section\n    [:span.UI-label \"Filter prefix:\"]\n    [ui-input \"text\" crud-filter]]\n   [:div.UI-task-section.UI-task-section--with-spaces\n    [ui-list-box\n     (filter-items @crud-items @crud-filter)\n     #(reset! crud-selected-item (-> % .-target .-value))]\n    [:div.UI-space-around\n     [:div.UI-form-inline\n      [:span.UI-label \"Name:\"]\n      [ui-input \"text\" crud-name]]\n     [:div.UI-form-inline\n      [:span.UI-label \"Surname:\"]\n      [ui-input \"text\" crud-surname]]]]\n   [:div#spacer]\n   [:div.UI-task-section\n    [ui-button \"Create\" (fn []\n                          (when (and (seq @crud-name)\n                                     (seq @crud-surname))\n                            (swap! crud-items\n                                   conj {:name    @crud-name\n                                         :surname @crud-surname})\n                            (reset! crud-name \"\")\n                            (reset! crud-surname \"\")))]\n    [ui-button \"Update\" (fn []\n                          (when (and (seq @crud-name)\n                                     (seq @crud-surname))\n                            (swap! crud-items\n                                   assoc\n                                   (int @crud-selected-item)\n                                   {:name    @crud-name\n                                    :surname @crud-surname})))]\n    [ui-button \"Delete\" (fn []\n                          (let [item-idx (int @crud-selected-item)]\n                            (when (and (>= item-idx 0) (< item-idx (count @crud-items)))\n                              (swap! crud-items utils/vec-remove item-idx))))]]])\n\n;; -------------------------\n;; Task - Circle Drawer\n\n;; Circle map definition\n;;   {:x  (-> e .-nativeEvent .-offsetX\n;;    :y  (-> e .-nativeEvent .-offsetY)\n;;    :d  30\n;;    :id (.getTime (js/Date.)))}\n(def circles-state   (r/atom {:history-idx 0\n                              :history     [[]]}))\n\n(def selected-circle (r/atom nil))\n\n;; possible frames state are:\n;; 0 - hidden\n;; 1 - menu options\n;; 2 - slider\n(def current-diameter-frame (r/atom {:state    0\n                                     :position {:x 0 :y 0}}))\n\n\n(defn reset-diameter-frame []\n  (reset! current-diameter-frame {:state    0\n                                  :position {:x 0 :y 0}}))\n\n\n(defn current-state\n  \"Return the current history state\"\n  []\n  (get-in @circles-state [:history (:history-idx @circles-state)]))\n\n\n(defn delete-future\n  \"Delete future history from the current index\"\n  []\n  ;; check if there's future to delete, to avoid subvec errors\n  (when (not= (count (:history @circles-state))\n              (dec (:history-idx @circles-state)))\n    (swap! circles-state update-in [:history] (fn [past-history]\n                                                (subvec past-history\n                                                        0\n                                                        ;; We incr the history index because the first\n                                                        ;; state an empty array, but count as 1\n                                                        (inc (:history-idx @circles-state)))))))\n\n\n(defn add-state\n  \"Create a state using the function and append it to the history\"\n  [create-state]\n  (delete-future)\n  (swap! circles-state update-in [:history-idx] inc)\n  ;; The future is a function of the past - Rich Hickey\n  ;; We run the creator function that get the last state of the app and append his modification\n  ;; returning a new state that will be appended in the history.\n  (swap! circles-state update-in [:history] (fn [past-history]\n                                              (conj past-history\n                                                    (create-state (peek past-history))))))\n\n\n(defn undo\n  \"Decrement the history index if > 0\"\n  []\n  (when (> (:history-idx @circles-state) 0)\n    (swap! circles-state update-in [:history-idx] dec)))\n\n\n(defn redo\n  \"Increment the history index if < length of history\"\n  []\n  (when (< (inc (:history-idx @circles-state))\n           (count (:history @circles-state)))\n    (swap! circles-state update-in [:history-idx] inc)))\n\n\n(defn add-circle\n  \"Create a new circle and push it into the application state history\"\n  [e]\n  (let [new-circle {:x  (-> e .-nativeEvent .-offsetX)\n                    :y  (-> e .-nativeEvent .-offsetY)\n                    :d  30 ; default circle diameter\n                    :id (.getTime (js/Date.))}]\n    (add-state (fn [prev-state]\n                 (conj prev-state new-circle)))))\n\n\n(defn show-circle-menu [e circle]\n  (let [pos {:x  (-> e .-nativeEvent .-pageX)\n             :y  (-> e .-nativeEvent .-pageY)}]\n    (utils/prevent-default e)\n    (reset! selected-circle circle)\n    (reset! current-diameter-frame {:state 1\n                                    :position pos})))\n\n\n(defn clone-current-history\n  \"Clone the current history in a new state\"\n  []\n  (let [idx (.indexOf (current-state) @selected-circle)]\n    (add-state (fn [prev-state] (assoc prev-state idx @selected-circle)))))\n\n\n(defn update-current-range\n  \"Update the current range only into the history, without adding a new one\"\n  [e]\n  (let [d   (int (-> e .-target .-value))                ; integer diameter\n        idx (.indexOf (current-state) @selected-circle)] ; index of selected circle into app state\n    (swap! circles-state assoc-in [:history (:history-idx @circles-state) idx :d] d)\n    (swap! selected-circle assoc-in [:d] d)))\n\n\n(defn circle-menu-2 []\n  (r/with-let [pos        (:position @current-diameter-frame)\n               ref        (atom nil) ; menu element ref\n               handler    (fn [e]\n                            (if (and @ref (not (.contains @ref (.-target e))))\n                              (reset-diameter-frame)\n                              (utils/prevent-default e)))\n               _          (.addEventListener js/document \"click\" handler)]\n    [:div.UI-menu {:style {:top  (:y pos) :left (:x pos)}\n                   :ref   #(reset! ref %)}\n     \"Adjust Diameter\"\n     ;; Update the diameter in the history only when the user stop dragging the slider,\n     ;; otherwhise update it only \"locally\"\n     [:input {:type        \"range\"\n              :min         2\n              :max         100\n              :value       (:d @selected-circle)\n              :on-change   update-current-range\n              :on-mouse-down clone-current-history}]]\n    (finally\n      (.removeEventListener js/document \"click\" handler))))\n\n\n(defn circle-menu-1 []\n  (r/with-let [pos        (:position @current-diameter-frame)\n               ref        (atom nil) ; menu element ref\n               handler    (fn [e]\n                            (if (and @ref (not (.contains @ref (.-target e))))\n                              (reset-diameter-frame)\n                              (swap! current-diameter-frame update-in [:state] inc)))\n               _          (.addEventListener js/document \"click\" handler)]\n    [:div.UI-menu {:style {:top  (:y pos) :left (:x pos)}\n                   :ref   #(reset! ref %)}\n     \"Adjust Diameter\"]\n    (finally\n      (.removeEventListener js/document \"click\" handler))))\n\n\n(defn circle-drawer []\n  [:div.UI-circle-drawer\n   [:div.UI-form-inline\n    [ui-button \"Undo\" #(undo)]\n    [ui-button \"Redo\" #(redo)]]\n   [:div.UI-canvas {:on-click add-circle}\n    (for [circle (current-state)]\n      [:div.UI-circle {:key (:id circle)\n                       :data-attr ()\n                       :on-click #(show-circle-menu % circle)\n                       :style {:top    (:y circle)\n                               :left   (:x circle)\n                               :width  (:d circle)\n                               :height (:d circle)}}])]\n   ;; show on not the diameter range\n   (case (:state @current-diameter-frame)\n     2 [circle-menu-2]\n     1 [circle-menu-1]\n     nil)])\n\n;; -------------------------\n;; Task - Cells\n\n;; Define the table sizes as costants\n(def table-size {:cols (map char (range (.charCodeAt \\A 0) (inc (.charCodeAt \\Z 0))))\n                 :rows (range 0 100)})\n\n\n;; Save the state of each cell using a keyword {:A0 {} :A1 {} ...}\n;; in this way is cheap updating and retriving data using one single atom\n(def table-state (r/atom {:A0 {:value \"1\" :computed 1}\n                          :A1 {:value \"2\" :computed 2}\n                          :A2 {:value \"=SUM(A0:A1, 2)\" :computed 5}}))\n\n;; List of cells that a cell computed formula depends on\n(def cell-dependencies (r/atom {}))\n\n(def active-cell (r/atom nil))    ; Current active cell\n(def edit-mode   (r/atom false)) ; Active cell is in editing mode\n\n\n(defn table-cell [col row]\n  (let [coord (str col row)]\n    (get @table-state (keyword coord))))\n\n\n(def operations\n  {:SUM #(apply + %)\n   :SUB #(apply - %)\n   :MUL #(apply * %)\n   :DIV #(apply / %)\n   :AVG #(/ (apply + %)\n            (count %))})\n\n\n(defn formula?\n  \"True if the cell value is a formula\"\n  [s]\n  (= (first s) \"=\"))\n\n\n;; A0, A0:B4\n(defn coord?\n  \"True if the string is a valid coordinate\"\n  [c]\n  (when (string? c)\n    (boolean (re-find #\"^[A-Z]{1}[0-9]{1,2}$\" c))))\n\n\n(defn operation?\n  \"True if the formula contains a valid operation\"\n  [formula]\n  (and (s/valid? :formula/op (subs formula 1 4))\n       (let [rest (subs formula 4)]\n         (and (= (first rest) \"(\")\n              (= (last rest) \")\")))))\n\n\n(defn range?\n  \"True if the string is a valid range\"\n  [r]\n  (and (string? r)\n       (= (count r) 5)\n       (= (nth r 2) \":\")\n       (coord? (subs r 0 2))\n       (coord? (subs r 3 5))))\n\n\n;; Integer and Decimal number\n(s/def :type/number\n  #(boolean (re-find #\"^\\d*\\.?\\d+$\" %)))\n\n\n;; SUM, SUB, MUL, DIV, AVG\n(s/def :formula/op\n  (set (map #(subs (str %) 1) (keys operations))))\n\n\n(defn cell-value\n  \"Get cell value using coordinates\"\n  [coord table-state]\n  (let [cell     (get @table-state (keyword coord))\n        computed (get cell :computed)\n        value    (get cell :value)]\n    (or computed\n        (when (and (seq value)\n                   (s/valid? :type/number value))\n          value))))\n\n\n(defn update-dependencies\n  \"Add a dependency to the cell dependencies state\"\n  [dep coord cell-dependencies]\n  (swap! cell-dependencies update-in [(keyword coord)] conj dep))\n\n\n(defn coord-from-range\n  \"Get column coordinate using spec map\"\n  [r]\n  (let [col (pprint/char-code (first r))\n        row (utils/parse-int (last r))]\n    {:col col :row row}))\n\n\n(defn parse-range\n  \"Parse and return a range\"\n  [value coord table-state cell-dependencies]\n  (let [parts (str/split value #\"\\:\")\n        start (coord-from-range (nth parts 0))\n        end   (coord-from-range (nth parts 1))]\n    ;; iterate for each column,row store the cell value into an array\n    (for [c (into [] (range (:col start) (inc (:col end))))\n          r (into [] (range (:row start) (inc (:row end))))]\n      (let [cell-coord (str (char c) r)\n            value      (cell-value cell-coord table-state)]\n        (update-dependencies cell-coord coord cell-dependencies)\n        (or (when (or (number? value) (s/valid? :type/number value))\n              (utils/parse-float value)) 0)))))\n\n\n(defn parse-args\n  \"Parse operation arguments\"\n  [params coord table-state cell-dependencies]\n  (let [args (str/split params #\",\")]\n    (if (> (count args) 1)\n      ;; parse all args and store them in a single vector\n      ;; in case or range, `flatten` remove the nested vector\n      (into [] (flatten (map #(parse-args % coord table-state cell-dependencies) args)))\n      (let [arg (str/trim (first args))]\n        ;; compute numbers, ranges, cells\n        (cond\n          (s/valid? :type/number arg) (utils/parse-float arg)\n          (s/valid? range? arg)       (parse-range arg coord table-state cell-dependencies)\n          (s/valid? coord? arg)       (do\n                                        (update-dependencies arg coord cell-dependencies)\n                                        ;; convert string number into numeric values\n                                        (let [value (cell-value arg table-state)]\n                                          (if (or (number? value) (s/valid? :type/number value))\n                                            (utils/parse-float value)\n                                            value))))))))\n\n\n;; Formulas Example:\n;; =A0\n;; =SUM(A0:B12)\n;; =SUM(A0:B4, 12)\n(defn compute-formula\n  \"Return the computed cell formula content \n   and update the cell-dependencies state while parsing the arguments.\"\n  [formula coord table-state cell-dependencies]\n  (if (operation? formula)\n    ;; if formula contains operations, apply them to the list of arguments\n    (let [op     (get operations (keyword (subs formula 1 4)))\n          params (subs formula 5 (dec (count formula)))\n          args   (parse-args params coord table-state cell-dependencies)]\n      (op args))\n    ;; otherwise, if argument is cell-coord, get that cell value\n    (let [arg (subs formula 1)]\n      (when (s/valid? coord? arg)\n        ((update-dependencies arg coord cell-dependencies)\n         (println (cell-value arg table-state))\n         (cell-value arg table-state))))))\n\n\n(defn change-cell-value [col row value]\n  (let [coord (str col row)]\n    ;; update/create the cell value in the table-state\n    (swap! table-state assoc-in [(keyword coord) :value] value)\n    ;; reset cell dependencies array\n    (swap! cell-dependencies assoc (keyword coord) [])\n    (if (formula? value)\n      ;; compute formula or set :computed to nil\n      (let [computed (compute-formula value coord table-state cell-dependencies)\n            formatted (if (float? computed)\n                        (js/parseFloat (.toFixed computed 5))\n                        computed)]\n        (swap! table-state\n               assoc-in\n               [(keyword coord) :computed]\n               formatted))\n      (swap! table-state assoc-in [(keyword coord) :computed] nil))\n    ;; re-compute all depented cell value\n    (doseq [[k v] @cell-dependencies]\n      ;; only when other cells are dependent on this one\n      (when (some #(= coord %) v)\n        (swap! table-state\n               assoc-in\n               [(keyword k) :computed]\n               (compute-formula (get-in @table-state [(keyword k) :value])\n                                k\n                                table-state\n                                cell-dependencies))))))\n\n\n(defn handle-cell-change [col row value]\n  (change-cell-value col row value)\n  (reset! edit-mode false))\n\n\n(defn set-active-cell [col row]\n  (let [coord (str col row)]\n    (reset! active-cell coord)\n    (reset! edit-mode true)))\n\n\n(defn cells []\n  [:div\n   [:div.UI-table-container\n    [:table.UI-table\n     [:tbody\n      [:tr.UI-table-tr-th\n       [:th.UI-table-th.UI-table-th-small]\n       (doall\n        (map\n         (fn [col]\n           [:th.UI-table-th {:key (str \"header-\" col)}\n            [:div.UI-table-cell-header col]])\n         (:cols table-size)))]\n      ;; used doall for performance reasons\n      (doall\n       (map\n        (fn [row]\n          [:tr {:key (str \"row-\" row)}\n           [:td.UI-table-header-vertical row]\n           (doall\n            (map\n             (fn [col]\n               (let [cell-coord (str col row)\n                     cell       (table-cell col row)\n                     cell-value (get cell :value)\n                     cell-comp  (get cell :computed)\n                     is-active  (= @active-cell cell-coord)]\n                 [:td.UI-table-td {:key (str  \"cell-\" col \"-\" row)}\n                  [:div.UI-table-cell {:on-click #(set-active-cell col row)}\n                   (if (and is-active @edit-mode)\n                     ;; show input if cell is active and is edit mode\n                     [:input.UI-table-cell-input\n                      {:default-value cell-value\n                       :auto-focus    true\n                       :on-blur       #(handle-cell-change col row (-> % .-target .-value))}]\n                     (or cell-comp cell-value))]]))\n             (:cols table-size)))])\n        (:rows table-size)))]]]\n   [:div.UI-table-desc\n    (str \"Click inside a cell to edit its formula.\"\n         \" Press enter to apply. Click outside the cell or press escape to cancel.\"\n         \" Here are some example contents:\"\n         \" '5.5', 'Some text', '=A1', '=SUM(B2:C4)', '=DIV(C1, 5)'.\"\n         \" Supported operations are SUM, SUB, MUL, DIV, AVG.\")]])\n\n;; -------------------------\n;; Page components\n\n(defn github-corner []\n  [:a.github-corner\n   {:aria-label \"View source on GitHub\"\n    :target \"_blank\"\n    :href \"https://github.com/elias94/7guis-clojurescript\"}\n   [:svg\n    {:aria-hidden \"true\"\n     :style {:fill \"#151513\" :color \"#fff\" :position \"absolute\" :top 0 :border 0 :right 0}\n     :view-box \"0 0 250 250\"\n     :height \"80\"\n     :width \"80\"}\n    [:path {:d \"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"}]\n    [:path.octo-arm\n     {:style {:transform-origin \"130px 106px\"}\n      :fill \"currentColor\"\n      :d\n      \"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"}]\n    [:path.octo-body\n     {:fill \"currentColor\"\n      :d\n      \"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"}]]])\n\n(defn home-page []\n  [:span.main\n   [github-corner]\n   [:h1.page-title \"7GUIs in Clojurescript with Reagent\"]\n   [:p\n    \"This is a live version of 7GUIs with \"\n    [:a {:href \"https://clojurescript.org\"\n         :target \"_blank\"}\n     \"Clojurescript\"]\n    \" and \"\n    [:a {:href \"https://reagent-project.github.io/\"\n         :target \"_blank\"}\n     \"Reagent\"]\n    \".\"\n    [:br]\n    [:small [:a {:href \"https://github.com/elias94/7guis-clojurescript\"\n                 :target \"_blank\"}\n             \"(source)\"]]]\n   [ui-task \"Counter\"               counter]\n   [ui-task \"Temperature Converter\" temp-converter]\n   [ui-task \"Flight Booker\"         flight-booker]\n   [ui-task \"Timer\"                 timer]\n   [ui-task \"CRUD\"                  crud]\n   [ui-task \"Circle Drawer\"         circle-drawer]\n   [ui-task \"Cells\"                 cells]])\n\n\n;; -------------------------\n;; Translate routes -> page components\n\n(defn page-for [route]\n  (case route\n    :index #'home-page))\n\n\n;; -------------------------\n;; Page mounting component\n\n(defn current-page []\n  (fn []\n    (let [page (:current-page (session/get :route))]\n      [:div\n       [page]\n       [:footer\n        [:p\n         \"Created by \"\n         [:a {:href \"https://www.eliascotto.com\"} \"Elia Scotto\"]\n         \".\"]]])))\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (rdom/render [current-page] (.getElementById js/document \"app\")))\n\n(defn init! []\n  (accountant/configure-navigation!\n   {:nav-handler\n    (fn [path]\n      (let [match (reitit/match-by-path router path)\n            current-page (:name (:data  match))\n            route-params (:path-params match)]\n        (session/put! :route {:current-page (page-for current-page)\n                              :route-params route-params})\n        (clerk/navigate-page! path)))\n    :path-exists?\n    (fn [path]\n      (boolean (reitit/match-by-path router path)))})\n  (accountant/dispatch-current!)\n  (mount-root))\n"]}