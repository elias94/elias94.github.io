{"version":3,"sources":["sevenguis/formula.cljs"],"mappings":"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","names":["p1__57411#","p1__57412#","p1__57413#","p1__57414#","p1__57415#","sevenguis.formula/operations","cljs.core.apply","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core//","cljs.core/count","sevenguis.formula/formula?","s","cljs.core._EQ_","cljs.core/first","sevenguis.formula/coord?","r","cljs.core/boolean","cljs.core/re-find","sevenguis.formula/operation?","formula","and__4221__auto__","cljs.spec.alpha.valid_QMARK_","cljs.core.subs","rest","cljs.core/last","cljs.spec.alpha/def-impl","p1__57416#","cljs.spec.alpha/cat-impl","cljs.core/set","sevenguis.formula/cell-value","coord","table-state","cell","cljs.core/deref","cljs.core.get","cljs.core.keyword","computed","value","or__4223__auto__","sevenguis.formula/update-dependencies","dep","cell-dependencies","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/conj","sevenguis.formula/coord-from-range","m","coord-pos","col","cljs.pprint/char-code","row","sevenguis.utils/parse-int","cljs.core/rest","sevenguis.formula/parse-range","cljs.spec.alpha/conform","start","end","iter__4622__auto__","s__57418","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","iterys__4618__auto__","s__57420","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","b__57422","cljs.core/chunk-buffer","i__57421","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57419","cljs.core/chunk-rest","cljs.core/cons","fs__4619__auto__","cljs.core.concat","iter__57417","c","cljs.core.into","cljs.core.range","cell-coord","sevenguis.formula/parse-args","args","clojure.string.split","p1__57423#","cljs.core.map","arg","sevenguis.utils/parse-float","G__57425","fexpr__57424","sevenguis.formula/compute-formula","op","params","cljs.core.drop_last","clojure.string.join","G__57427","fexpr__57426","cljs.core/chunk-first"],"sourcesContent":["(ns sevenguis.formula\n  (:require [clojure.spec.alpha :as s]\n            [clojure.string     :as str]\n            [cljs.pprint        :as pprint]\n            [sevenguis.utils    :as utils]))\n\n\n(def operations\n  {:SUM #(apply + %)\n   :SUB #(apply - %)\n   :MUL #(apply * %)\n   :DIV #(apply / %)\n   :AVG #(/ (apply + %)\n            (count %))})\n\n\n(defn formula?\n  \"True if the cell value is a formula\"\n  [s]\n  (= (first s) \"=\"))\n\n\n;; A0, A0:B4\n(defn coord?\n  \"True if the string is a valid range\"\n  [r]\n  (and (string? r)\n       (boolean (re-find #\"^[A-Z]{1}[0-9]{1,2}$\" r))))\n\n\n(defn operation?\n  \"True if the formula contains a valid operation\"\n  [formula]\n  (and (s/valid? :formula/op (subs formula 1 4))\n       (let [rest (subs formula 3)]\n         (and (= (first rest) \"(\")\n              (= (last rest) \")\")))))\n\n\n;; Integer and Decimal number\n(s/def :type/number\n  #(boolean (re-find #\"^\\d*\\.?\\d+$\" %)))\n\n\n;; A0, A0:B4\n(s/def :cell/range\n  (s/cat\n   :coord-start coord?\n   :semicolon   #{\\:}\n   :coord-end   coord?))\n\n\n;; SUM, SUB, MUL, DIV, AVG\n(s/def :formula/op\n  (set [\"AVG\"\n        \"SUB\"\n        \"MUL\"\n        \"DIV\"\n        \"AVG\"]))\n\n\n(defn cell-value\n  \"Get cell value using coordinates\"\n  [coord table-state]\n  (let [cell     (get @table-state (keyword coord))\n        computed (get :computed cell)\n        value    (get :value cell)]\n    (or computed\n        (when (s/valid? :type/number value)\n          value))))\n\n\n(defn update-dependencies\n  \"Add a dependency to the cell dependencies state\"\n  [dep coord cell-dependencies]\n  (swap! cell-dependencies update-in [(keyword coord)] conj dep))\n\n\n(defn coord-from-range\n  \"Get column coordinate using spec map\"\n  [m coord-pos]\n  (let [r   (get coord-pos m)\n        col (pprint/char-code (first r))\n        row (utils/parse-int (rest r))]\n    {:col col :row row}))\n\n\n(defn parse-range\n  \"Parse and return a range\"\n  [value coord table-state cell-dependencies]\n  (let [m     (s/conform :cell/range value)\n        start (coord-from-range m :coord-start)\n        end   (coord-from-range m :coord-end)]\n    ;; iterate for each column,row store the cell value into an array\n    (for [c (into [] (range (:col start) (inc (:col end))))\n          r (into [] (range (:row start) (inc (:row end))))]\n      (let [cell-coord (str c r)\n            value      (cell-value cell-coord table-state)]\n        (update-dependencies cell-coord coord cell-dependencies)\n        (or value 0)))))\n\n\n(defn parse-args\n  \"Parse operation arguments\"\n  [formula coord table-state cell-dependencies]\n  (let [args (str/split formula #\",\")]\n    (if (> (count args) 1)\n      (into [] (map #(parse-args % coord table-state cell-dependencies) args))\n      (let [arg (first args)]\n        ;; compute numbers, ranges, cells\n        (cond\n          (s/valid? :type/number arg) (utils/parse-float arg)\n          (s/valid? :cell/range arg)  (parse-range arg coord table-state cell-dependencies)\n          (s/valid? coord? arg)       ((update-dependencies arg coord cell-dependencies)\n                                       (cell-value arg table-state)))))))\n\n\n;; Formulas Example:\n;; =A0\n;; =SUM(A0:B12)\n;; =SUM(A0:B4, 12)\n;; =DIV(SUM(12, 34), D5)\n(defn compute-formula\n  \"Return the computed cell formula (without the =)\"\n  [formula coord table-state cell-dependencies]\n  (if (operation? formula)\n    ;; if formula, apply operation to list of arguments\n    (let [op     (get operations (keyword (subs formula 1 4)))\n          params (drop-last (subs formula 4))\n          args   (parse-args (str/join params) coord table-state cell-dependencies)]\n      (op args))\n    ;; otherwise compute argument if coord\n    (let [arg (rest formula)]\n      (when (s/valid? coord? arg)\n        ((update-dependencies arg coord cell-dependencies)\n         (cell-value arg table-state))))))\n"]}